sameTokens={}
sameTokens["PLUSEQUAL"] = ['PLUSEQUAL', 'MINEQUAL', 'STAREQUAL', 'SLASHEQUAL', 'PERCENTEQUAL',
						   'STARSTAREQUAL', 'SLASHSLASHEQUAL']
sameTokens["EQEQUAL"] = ['EQEQUAL', 'NOTEQUAL', 'LESSEQUAL', 'GREATEREQUAL', 'LESS', 'GREATER']
sameTokens['PLUS'] = ['PLUS', 'MINUS', 'STAR', 'SLASH', 'PERCENT', 'STARSTAR']
# recheck these
#sameTokens['INUMBER']=['INUMBER','FNUMBER']
#sameTokens['STRING'] = ['STRING','TRIPLESTRING','RAWSTRING','UNICODESTRING']
#sameTokens['BINARYNUMBER'] =['BINARYNUMBER','OCTALNUMBER','HEXADECIMALNUMBER']
sameTokens['VBAR'] = ['VBAR', 'AMPER', 'CIRCUMFLEX', 'LEFTSHIFT', 'RIGHTSHIFT']
sameTokens['AND'] = ['AND', 'OR']
# do more refinement

tokenReverseDict = {
				 "EQEQUAL" : '==',
				 "NOTEQUAL" : '!=' ,
				 "LESSEQUAL" : '<=', 
				 "LEFTSHIFT" : '<<',
				 "GREATEREQUAL" : '>=', 
				 "RIGHTSHIFT" : '>>',
				 "PLUSEQUAL" : '+=', 
				 "MINEQUAL" : '-=', 
				 "STAREQUAL" : '*=', 
				 "SLASHEQUAL" : '/=',
				 "PERCENTEQUAL" :'%=', 
				 "STARSTAR" : '**', 
				 "SLASHSLASH" : '//',
				 "STARSTAREQUAL" : '**=',
				 "SLASHSLASHEQUAL" : '//=',
				 "COLON" : ':',
				 "COMMA" : ',',
				 "SEMI"  : ';',
				 "PLUS"  : '+',
				 "MINUS" : '-',
				 "STAR"  : '*',
				 "SLASH" : '/',
				 "VBAR"  : '|',
				 "AMPER" : '&',
				 "LESS"  : '<',
				 "GREATER" : '>',
				 "EQUAL" : '=',
				 "DOT"  : '.',
				 "PERCENT" : '%',
				 "BACKQUOTE"  : '`',
				 "CIRCUMFLEX" : '^',
				 "TILDE" : '~',
				 "AT" : '@',
				 "LPAREN" : '(',
				 "RPAREN" : ')',
				 "RBRACE" : '}',
				 "LBRACE" : '{',
				 "LSQB" : '[',
				 "RSQB" : ']',
				 "AND" : 'and',
				 "AS" : 'as',
				 "ASSERT" : 'assert',
				 "BREAK" : 'break',
				 "CLASS" : 'class',
				 "CONTINUE" : 'continue',
				 "DEF" : 'def',
				 "DEL" : 'del',
				 "ELIF" : 'elif',
				 "ELSE" : 'else', 
				 "EXCEPT" : 'except', 
				 "EXEC" : 'exec',
				 "FINALLY" : 'finally',
				 "FOR" : 'for',
				 "FROM" : 'from', 
				 "GLOBAL" : 'global',
				 "IF" : 'if', 
				 "IMPORT" : 'import', 
				 "IN" : 'in',
				 "IS" : 'is', 
				 "LAMBDA" : 'lambda',
				 "NOT" : 'not',
				 "OR" : 'or',
				 "PASS" : 'pass',
				 "PRINT" : 'print',
				 "RAISE" : 'raise', 
				 "RETURN" : 'return',
				 "TRY" : 'try', 
				 "WHILE" :'while', 
				 "WITH" : 'with',
				 "YIELD" : 'yield',
				 "NEWLINE" : '\n',
				 "STRING" : "'~string~'",
				 "RAWSTRING" : "'~string~'",
				 "TRIPLESTRING" : "'''~string~'''",
				 "NAME" : "variable_name",
				 "INUMBER" : "'~number~'",
				 "FNUMBER" : "'~number~'",
				 "NUMBER" : "'~number~'",
				 "HEXADECIMALNUMBER" : "'~number~'",
				 "OCTALNUMBER" : "'~number~",
				 "BINARYNUMBER" : "'~number~'",
				 "INDENT" : " ",
				 "DEDENT" : "",
				 "ENDMARKER" : ""
				}
